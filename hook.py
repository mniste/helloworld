import uuid

from aiohttp_jinja2 import template, web
from app.service.auth_svc import for_all_public_methods, check_authorization

from app.objects.c_ability import Ability, AbilitySchema
from app.objects.secondclass.c_executor import Executor, ExecutorSchema
from app.objects.c_agent import Agent

name = 'HelloWorld'
description = 'A Caldera plugin that creates a "Hello World!" txt file in the target machine.'
address = '/plugin/helloworld/gui'

async def enable(services):
    app = services.get('app_svc').application
    fetcher = Fetcher(services)
    app.router.add_route('GET', '/plugin/helloworld/gui', fetcher.hello_world_GUI)
    app.router.add_route('POST', '/plugin/helloworld/manualcommand', fetcher.task)

@for_all_public_methods(check_authorization)
class Fetcher:

    def __init__(self, services):
        self.services = services
        self.auth_svc = services.get('auth_svc')
        self.rest_svc = services.get('rest_svc')
        
    @template('helloworld.html')
    async def hello_world_GUI(self, request):
        pass
        # fill in dropdown box with all active agents
        # when button is clicked, print hello world in target machine. use selected agent to send command

    # task agent with this command
    async def task(self, request):
        data = await request.json()
        paw = data.get('paw')
        
        for agent in await self.rest_svc.get_service('data_svc').locate('agents', dict(paw=paw)):
            # create executor
            executor = await self.create_executor(data={})
            # create ability
            ability = await self.create_ability(data={}, executor=executor)
            abilities = [ability]

            await agent.task(abilities=abilities, obfuscator='plain-text')
            return web.json_response('complete')



    async def create_executor(self, data: dict):
        data['timeout'] = 60
        data['name'] = "sh"
        data['platform'] = "linux"
        data['command'] = "echo 'Hello, world!' > myfile.txt"
        executor = ExecutorSchema().load(data)
        return executor

    async def create_ability(self, data: dict, executor: Executor):
        data['ability_id'] = str(uuid.uuid4())
        data['tactic'] = 'auto-generated'
        data['technique_id'] = 'auto-generated'
        data['technique_name'] = 'auto-generated'
        data['name'] = 'HelloWorld'
        if not data.get('description'):
            data['description'] = 'An ability generated by HelloWorld'
        data['executors'] = [ExecutorSchema().dump(executor)]
        ability = AbilitySchema().load(data)
        return ability
